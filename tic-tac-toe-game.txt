#include <iostream>
#include <vector>
#include <random>
#include <algorithm>

class TicTacToe {
private:
    std::vector<std::vector<char>> board;
    const char EMPTY = '_';
    const char PLAYER = 'X';
    const char COMPUTER = 'O';

    bool isValidMove(int row, int col) const {
        return row >= 0 && row < 3 && col >= 0 && col < 3 && board[row][col] == EMPTY;
    }

    bool checkWin(char player) const {
        // Check rows and columns
        for (int i = 0; i < 3; ++i) {
            if ((board[i][0] == player && board[i][1] == player && board[i][2] == player) ||
                (board[0][i] == player && board[1][i] == player && board[2][i] == player)) {
                return true;
            }
        }
        // Check diagonals
        return (board[0][0] == player && board[1][1] == player && board[2][2] == player) ||
               (board[0][2] == player && board[1][1] == player && board[2][0] == player);
    }

    bool isBoardFull() const {
        return std::all_of(board.begin(), board.end(), 
            [this](const auto& row) { 
                return std::none_of(row.begin(), row.end(), 
                    [this](char c) { return c == EMPTY; });
            });
    }

    int minimax(bool isMaximizing, int depth) {
        if (checkWin(COMPUTER)) return 10 - depth;
        if (checkWin(PLAYER)) return depth - 10;
        if (isBoardFull()) return 0;

        int bestScore = isMaximizing ? -1000 : 1000;
        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < 3; ++j) {
                if (board[i][j] == EMPTY) {
                    board[i][j] = isMaximizing ? COMPUTER : PLAYER;
                    int score = minimax(!isMaximizing, depth + 1);
                    board[i][j] = EMPTY;
                    bestScore = isMaximizing ? std::max(score, bestScore) : std::min(score, bestScore);
                }
            }
        }
        return bestScore;
    }

    void computerMove() {
        int bestScore = -1000;
        std::pair<int, int> bestMove;

        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < 3; ++j) {
                if (board[i][j] == EMPTY) {
                    board[i][j] = COMPUTER;
                    int score = minimax(false, 0);
                    board[i][j] = EMPTY;
                    if (score > bestScore) {
                        bestScore = score;
                        bestMove = {i, j};
                    }
                }
            }
        }

        board[bestMove.first][bestMove.second] = COMPUTER;
    }

public:
    TicTacToe() : board(3, std::vector<char>(3, EMPTY)) {}

    void printBoard() const {
        for (const auto& row : board) {
            for (char cell : row) {
                std::cout << cell << ' ';
            }
            std::cout << '\n';
        }
    }

    bool makeMove(int position) {
        int row = (position - 1) / 3;
        int col = (position - 1) % 3;
        if (isValidMove(row, col)) {
            board[row][col] = PLAYER;
            return true;
        }
        return false;
    }

    bool isGameOver(char& winner) const {
        if (checkWin(PLAYER)) {
            winner = PLAYER;
            return true;
        }
        if (checkWin(COMPUTER)) {
            winner = COMPUTER;
            return true;
        }
        if (isBoardFull()) {
            winner = 'T'; // Tie
            return true;
        }
        return false;
    }

    void playComputerTurn() {
        computerMove();
    }
};

int main() {
    std::cout << "Welcome to Tic Tac Toe!\n";
    std::cout << "Enter a number from 1-9 to make your move.\n";

    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> dis(0, 1);

    while (true) {
        TicTacToe game;
        bool playerTurn = dis(gen) == 0;

        std::cout << (playerTurn ? "You go first!\n" : "Computer goes first!\n");

        char winner = 'N'; // No winner yet
        while (!game.isGameOver(winner)) {
            if (playerTurn) {
                game.printBoard();
                int move;
                std::cout << "Your turn. Enter a number (1-9): ";
                std::cin >> move;
                while (!game.makeMove(move)) {
                    std::cout << "Invalid move. Try again: ";
                    std::cin >> move;
                }
            } else {
                game.playComputerTurn();
                std::cout << "Computer's turn:\n";
            }
            playerTurn = !playerTurn;
        }

        game.printBoard();
        if (winner == PLAYER) {
            std::cout << "Congratulations! You win!\n";
        } else if (winner == COMPUTER) {
            std::cout << "You lost. Better luck next time!\n";
        } else {
            std::cout << "It's a tie!\n";
        }

        char playAgain;
        std::cout << "Do you want to play again? (y/n): ";
        std::cin >> playAgain;
        if (playAgain != 'y' && playAgain != 'Y') {
            break;
        }
    }

    return 0;
}
